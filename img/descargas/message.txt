public static void quickSortNombresAscendente(Alumno[] alumnos, int inicio, int fin) {
        if (inicio < fin) {
            int indiceParticion = particionNombres(alumnos, inicio, fin);
            quickSortNombresAscendente(alumnos, inicio, indiceParticion - 1);
            quickSortNombresAscendente(alumnos, indiceParticion + 1, fin);
        }
    }
    private static int particionNombres(Alumno[] alumnos, int inicio, int fin) {
        String pivot = alumnos[fin].getNombre();
        int i = inicio - 1;
        for (int j = inicio; j < fin; j++) {
            if (alumnos[j].getNombre().compareTo(pivot) <= 0) {
                i++;
                Alumno temp = alumnos[i];
                alumnos[i] = alumnos[j];
                alumnos[j] = temp;
            }
        }
        Alumno temp = alumnos[i + 1];
        alumnos[i + 1] = alumnos[fin];
        alumnos[fin] = temp;
        return i + 1;
    }
    public static void mergeSortNotasDescendente(Alumno[] alumnos, int inicio, int fin) {
        if (inicio < fin) {
            int medio = (inicio + fin) / 2;
            mergeSortNotasDescendente(alumnos, inicio, medio);
            mergeSortNotasDescendente(alumnos, medio + 1, fin);
            mergeNotas(alumnos, inicio, medio, fin);
        }
    }
    private static void mergeNotas(Alumno[] alumnos, int inicio, int medio, int fin) {
        int n1 = medio - inicio + 1;
        int n2 = fin - medio;
        Alumno[] izquierda = new Alumno[n1];
        Alumno[] derecha = new Alumno[n2];
        for (int i = 0; i < n1; i++) {
            izquierda[i] = alumnos[inicio + i];
        }
        for (int j = 0; j < n2; j++) {
            derecha[j] = alumnos[medio + 1 + j];
        }
        int i = 0, j = 0;
        int k = inicio;
        while (i < n1 && j < n2) {
            if (izquierda[i].getPromedioFinal() >= derecha[j].getPromedioFinal()) {
                alumnos[k] = izquierda[i];
                i++;
            } else {
                alumnos[k] = derecha[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            alumnos[k] = izquierda[i];
            i++;
            k++;
        }
        while (j < n2) {
            alumnos[k] = derecha[j];
            j++;
            k++;
        }
    }